{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchWith","name","mtd","params","fetch","method","headers","body","JSON","stringify","then","res","json","InputBox","props","state","fname","lname","time","kind","onSubmit","event","addAppt","type","value","this","onChange","setState","target","placeholder","Component","App","doctorData","viewDoctor","viewDate","dateTxt","newApptID","bind","removeAppt","welcomeMessage","data","doctors","comp","preventDefault","appt","apptID","dr","date","toString","ID","prev","appts","scheds","doctorList","Object","entries","app","DoctorDisplay","doc","schedDisplay","schedTableDisplay","map","item","eventKey","onClick","email","selected","class","window","token","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"js/main.71e819b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction fetchWith(name, mtd, params){\n  if(mtd === 'POST' || mtd === 'DELETE') {\n    return fetch(name, {method: mtd, \n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(params)})\n      .then(res => res.json());\n    }\n    return fetch(name, {method: mtd})\n      .then(res => res.json());\n}\n\nclass InputBox extends Component{\n  constructor(props){\n    super(props);\n    this.state={fname : \"\", lname : \"\", time: \"\", kind: \"\"};\n  }\n\n  render(){\n    return (<div><form onSubmit={event => \n      this.props.addAppt(this, event)}> <label> Patient name: {\" \"} \n      <input type=\"text\" value={this.state.fname} name=\"First Name\"\n          onChange={event => this.setState({fname : event.target.value})} \n          placeholder=\"First Name\"/> \n      <input type=\"text\" value={this.state.lname} name=\"Last Name\"\n          onChange={event => this.setState({lname : event.target.value})} \n          placeholder=\"Last Name\"/> \n      <input type=\"text\" value={this.state.time} name=\"Time\"\n          onChange={event => this.setState({time : event.target.value})} \n          placeholder=\"Time\"/>\n      <input type=\"text\" value={this.state.kind} name=\"Kind\"\n          onChange={event => this.setState({kind : event.target.value})} \n          placeholder=\"Kind\"/> \n      <input type=\"submit\" name=\"Kind\" value=\"Enter\"/> \n      </label>\n      </form></div>)\n  }\n}\n\n//the dashboard application\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state={doctorData : {},\n                viewDoctor: \"\",\n                viewDate: \"\",\n                dateTxt: \"\",\n                newApptID: 0};\n    this.addAppt=this.addAppt.bind(this);\n    this.removeAppt=this.removeAppt.bind(this);\n  }\n\n  componentDidMount(){\n    this.setState({welcomeMessage : \"loading...\"});\n    fetchWith('/get-data', 'GET', {})\n    .then(data => this.setState({doctorData : data.doctors}));\n  }\n\n  addAppt(comp, event){\n    event.preventDefault();\n    var appt = comp.state;\n    var apptID = this.state.newApptID;\n    var dr = this.state.viewDoctor;\n    var date = this.state.viewDate;\n    var params = {apptID: apptID.toString(), ID: dr, date: date, appt: appt};\n    this.setState(function(prev){\n      if(!(date in prev.doctorData[dr].appts)){\n        prev.doctorData[dr].appts[date] = {};\n      }\n      prev.doctorData[dr].appts[date][apptID] = appt;\n      return {doctorData : prev.doctorData, newApptID : prev.newApptID + 1}});\n    fetchWith('/add-appt', 'POST', params);\n    comp.setState({fname : \"\", lname : \"\", time: \"\", kind: \"\"});\n  }\n\n  removeAppt(apptID){\n    var dr = this.state.viewDoctor;\n    var date = this.state.viewDate;\n    var params = {apptID: apptID.toString(), ID: dr, date: date};\n    this.setState(function(prev){\n      delete prev.doctorData[dr].appts[date][apptID];\n      return {doctorData : prev.doctorData}});\n    fetchWith('/rmv-appt', 'DELETE', params);\n  }\n\n\n  render() {\n    var doctorList = Object.entries(this.state.doctorData);\n    var app = this;\n    var DoctorDisplay = \"\";\n    var doc = null, scheds;\n    if(app.state.viewDoctor in app.state.doctorData){\n      var doc = app.state.doctorData[app.state.viewDoctor];\n      var schedDisplay = \"\";\n      if(app.state.viewDate != \"\"){\n        var schedTableDisplay = \"\";\n        if(app.state.viewDate in doc.appts){\n          scheds = Object.entries(doc.appts[app.state.viewDate]);\n          schedTableDisplay = (<div>{scheds.map(item => \n            <p eventKey = {item[0]} > Name: {item[1].fname} {item[1].lname}   |     \n            Time: {item[1].time}   | Kind: {item[1].kind}\n            <a onClick={event => this.removeAppt(item[0])}> Remove</a></p>)}</div>);\n        }\n        schedDisplay = (<div>{schedTableDisplay}\n            <InputBox addAppt={app.addAppt} /></div>);\n      }\n      DoctorDisplay = (<div>\n        <h2>Dr. {doc.fname} {doc.lname}</h2>\n        <h3>{doc.email}</h3>\n        <form onSubmit={function(event){\n      event.preventDefault();\n      app.setState(function(prev){return {viewDate : prev.dateTxt};});}}> \n      <label> Date: {\" \"} \n      <input type=\"text\" value={app.state.value} name=\"date\"\n          onChange={event => app.setState({dateTxt: event.target.value})} placeholder=\"enter date\"/> \n      </label>\n      </form>\n        {schedDisplay}</div>)\n    }\n    return (<div>\n      <ul>{doctorList.map(function(item){\n          var selected = \"\"\n          if(item[0] == app.state.viewDoctor){\n            selected = '(X)'\n          }\n          return (<li eventKey = {item[0]}> <a onClick={(event)=>\n          app.setState({viewDoctor : item[0]})}>\n              {item[1].lname}, {item[1].fname} </a> {selected} </li>)})}</ul>\n      <div class=\"App\">\n        <h1>{window.token}</h1>\n        {DoctorDisplay}\n        </div></div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}