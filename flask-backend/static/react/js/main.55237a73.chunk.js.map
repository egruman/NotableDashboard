{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["getDt","date","getFullYear","toString","getMonth","getDate","fetchWith","name","mtd","params","fetch","method","headers","body","JSON","stringify","then","res","json","InputBox","props","state","fname","lname","time","kind","onSubmit","event","addAppt","type","value","this","onChange","setState","target","placeholder","clearIcon","onClockClose","prev","hr_mn","split","min","isNaN","parseInt","zero","Math","floor","newTime","Component","App","doctorData","viewDoctor","viewDate","Date","bind","removeAppt","welcomeMessage","data","doctors","comp","preventDefault","appt","apptID","now","dr","ID","total","appts","apptsList","Object","values","i","other","console","log","alert","scheds","doctorList","entries","app","DoctorDisplay","doc","schedDisplay","schedTableDisplay","map","item","index","eventKey","onClick","email","selected","class","window","token","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"js/main.55237a73.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport DatePicker from \"react-datepicker\";\nimport TimePicker from 'react-time-picker';\nimport './App.css';\nfunction getDt(date){\n  return date.getFullYear().toString() + '/' +date.getMonth().toString() + '/' +date.getDate().toString();\n}\n\nfunction fetchWith(name, mtd, params){\n  if(mtd === 'POST' || mtd === 'DELETE') {\n    return fetch(name, {method: mtd, \n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(params)})\n      .then(res => res.json());\n    }\n    return fetch(name, {method: mtd})\n      .then(res => res.json());\n}\n\nclass InputBox extends Component{\n  constructor(props){\n    super(props);\n    this.state={fname : \"\", lname : \"\", time: \"10:00\", kind: \"New Patient\"};\n  }\n\n  render(){\n    return (<div><form onSubmit={event => \n      this.props.addAppt(this, event)}> <label> Patient name: {\" \"} \n      <input type=\"text\" value={this.state.fname} name=\"First Name\"\n          onChange={event => this.setState({fname : event.target.value})} \n          placeholder=\"First Name\"/> \n      <input type=\"text\" value={this.state.lname} name=\"Last Name\"\n          onChange={event => this.setState({lname : event.target.value})} \n          placeholder=\"Last Name\"/> \n      <TimePicker clearIcon={null}\n          value={this.state.time}\n          onClockClose={()=>this.setState(function(prev){\n            var hr_mn = prev.time.split(':');\n            var min = 0;\n            if(!isNaN(hr_mn[1])){\n              min = parseInt(hr_mn[1]);\n            }\n            if(isNaN(hr_mn[0])){\n              hr_mn[0] = '0';\n            }\n            min = Math.floor(min/15) * 15;\n            var zero = \"\";\n            if(min < 10){\n              zero ='0';\n            }\n            return {time: hr_mn[0]+':'+zero+min.toString()};\n          })}\n          onChange={newTime => this.setState({time : newTime})} />\n      <select value={this.state.kind} onChange={event => this.setState({kind : event.target.value})}>\n            <option value=\"New Patient\">New Patient</option>\n            <option value=\"Follow-up\">Follow-up</option>\n          </select>\n      <input type=\"submit\" value=\"Enter\"/> \n      </label>\n      </form></div>)\n  }\n}\n\n//the dashboard application\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state={doctorData : {},\n                viewDoctor: \"\",\n                viewDate: new Date()};\n    this.addAppt=this.addAppt.bind(this);\n    this.removeAppt=this.removeAppt.bind(this);\n  }\n\n  componentDidMount(){\n    this.setState({welcomeMessage : \"loading...\"});\n    fetchWith('/get-data', 'GET', {})\n    .then(data => this.setState({doctorData : data.doctors}));\n  }\n\n  addAppt(comp, event){\n    event.preventDefault();\n    var appt = comp.state;\n    var apptID = Date.now();\n    var dr = this.state.viewDoctor;\n    var date = getDt(this.state.viewDate);\n    if(appt.lname === \"\" || appt.fname === \"\"){\n      alert('Name incomplete.');\n      return;\n    }\n    var params = {apptID: apptID, ID: dr, date: date, appt: appt};\n    var total = 0;\n    if(date in this.state.doctorData[dr].appts){   \n      var apptsList = Object.values(this.state.doctorData[dr].appts[date]);\n      for(var i in apptsList){\n        var other = apptsList[i];\n        console.log(JSON.stringify(other) +'==' + appt.time.toString());\n        if(other.time === appt.time){\n          total++;\n        }\n        if(total==3){\n          alert('Too many appointments scheduled at that time.');\n          return;\n        }\n      }\n    }\n    this.setState(function(prev){\n      if(!(date in prev.doctorData[dr].appts)){\n        prev.doctorData[dr].appts[date] = {};\n      }\n      prev.doctorData[dr].appts[date][apptID] = appt;\n      return {doctorData : prev.doctorData}});\n    fetchWith('/add-appt', 'POST', params);\n    comp.setState({fname : \"\", lname : \"\", kind: \"\"});\n  }\n\n  removeAppt(apptID){\n    var dr = this.state.viewDoctor;\n    var date = getDt(this.state.viewDate);\n    var params = {apptID: apptID, ID: dr, date: date};\n    this.setState(function(prev){\n      delete prev.doctorData[dr].appts[date][apptID];\n      return {doctorData : prev.doctorData}});\n    fetchWith('/rmv-appt', 'DELETE', params);\n  }\n\n\n  render() {\n    var doctorList = Object.entries(this.state.doctorData);\n    var app = this;\n    var DoctorDisplay = \"\";\n    var doc = null, scheds;\n    if(app.state.viewDoctor in app.state.doctorData){\n      var doc = app.state.doctorData[app.state.viewDoctor];\n      var schedDisplay = \"\";\n      if(getDt(app.state.viewDate) != \"\"){\n        var schedTableDisplay = \"\";\n        if(getDt(app.state.viewDate) in doc.appts){\n          scheds = Object.entries(doc.appts[getDt(app.state.viewDate)]);\n          schedTableDisplay = (<div>{scheds.map((item, index) => \n            <p eventKey = {item[0]} > {index+1}. Name: {item[1].fname} {item[1].lname}   |     \n            Time: {item[1].time}   | Kind: {item[1].kind}\n            <a onClick={event => this.removeAppt(item[0])}> | (Remove)</a></p>)}</div>);\n        }\n        schedDisplay = (<div>{schedTableDisplay}\n            <InputBox addAppt={app.addAppt} /></div>);\n      }\n      DoctorDisplay = (<div>\n        <h2>Dr. {doc.fname} {doc.lname}</h2>\n        <h3>{doc.email}</h3>\n      <label> Select Date: {\" \"} \n      <DatePicker\n        selected={this.state.viewDate}\n          onChange={date => app.setState({viewDate: date})}/> \n      </label>\n        {schedDisplay}</div>)\n    }\n    return (<div>\n      <h1> Physician List: </h1>\n      <ul>{doctorList.map(function(item){\n          var selected = \"\"\n          if(item[0] == app.state.viewDoctor){\n            selected = '(X)'\n          }\n          return (<li eventKey = {item[0]}> <a onClick={(event)=>\n          app.setState({viewDoctor : item[0]})}>\n              {item[1].lname}, {item[1].fname} </a> {selected} </li>)})}</ul>\n      <div class=\"App\">\n        <h1>{window.token}</h1>\n        {DoctorDisplay}\n        <br/><br/><br/><br/><br/><br/>\n        </div></div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";"],"sourceRoot":""}